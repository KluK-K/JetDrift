#include <TFile.h>
#include <TH1D.h>
#include <TH2D.h>
#include <TGraph.h>
#include <TCanvas.h>
#include <TStyle.h>
#include <TMatrixD.h>
#include <TMatrixDSym.h>
#include <TMatrixDSymEigen.h>
#include <memory>
#include <iostream>
#include <vector>
#include <cmath>
#include "RooUnfoldResponse.h"
#include "RooUnfoldBayes.h"

void UnfoldAndAnalyze_V1_Bayes(
    const char* respFile = "Combined_V1_Matrix_WTA_SOPcut_v5.root",
    const char* dataFile = "WTA_V1_EnergyBands.root",
    const int   nIter    = 4
){

    std::unique_ptr<TFile> fResp(TFile::Open(respFile,"READ"));
    auto* hResp2D = dynamic_cast<TH2D*>(fResp->Get("hBigCentral"));
    TH1* hRecoTrain = hResp2D->ProjectionX("hRecoTrain");   // 256 bin
    TH1* hGenTrain  = hResp2D->ProjectionY("hGenTrain");    // 160 bin
    std::unique_ptr<TFile> fData(TFile::Open(dataFile,"READ"));
    auto* hData256 = dynamic_cast<TH1D*>(fData->Get("hV1_EnergyBands"));
    TH1D* hDataMap = (TH1D*)hRecoTrain->Clone("hDataMap");
    hDataMap->Reset();
    for(int ib=1; ib<=hData256->GetNbinsX(); ++ib){
        const double x  = hData256->GetBinCenter(ib);
        const int    j  = hDataMap->FindBin(x);
        const double c  = hData256->GetBinContent(ib);
        const double e  = hData256->GetBinError  (ib);
        hDataMap->AddBinContent(j,c);
        double oldE = hDataMap->GetBinError(j);
        hDataMap->SetBinError(j,std::sqrt(oldE*oldE+e*e));
    }
    std::cout<<"[INFO] data 256 bins → mapped to "
             <<hDataMap->GetNbinsX()<<" reco-bins\n";

    RooUnfoldResponse resp(hRecoTrain,hGenTrain,hResp2D);
    RooUnfoldBayes    unfold(&resp,hDataMap,nIter);
    TH1*     hTruth160 = unfold.Hunfold();                             // 160 bin
    TMatrixD cov160    = unfold.Eunfold(RooUnfolding::kCovariance);    // 160×160
    constexpr int NSLICE  = 5;        // truth energy slices
    constexpr int NBINPS  = 32;       // V₁ bins per slice
    constexpr int NBIN    = NSLICE*NBINPS; // =160

    TH1D* hErr = new TH1D("hErr",
        "Unfolded V_{1} 1#sigma error per bin;global unfolded bin ID;#sigma(V_{1})",
        NBIN, 0, NBIN);

    std::vector<double> sigma(NBIN,0.0);
    for(int i=0;i<NBIN;++i){
        sigma[i]=std::sqrt(cov160(i,i));
        hErr->SetBinContent(i+1,sigma[i]);
    }

    TH2D* hCorr = new TH2D("hCorr",
        "Correlation matrix #rho_{ij};unfolded bin i;unfolded bin j",
        NBIN,0,NBIN, NBIN,0,NBIN);
    for(int i=0;i<NBIN;++i)
      for(int j=0;j<NBIN;++j){
          const double d=sigma[i]*sigma[j];
          hCorr->SetBinContent(i+1,j+1,(d>0)?cov160(i,j)/d:0.);
      }

    TH2D* hSlice = new TH2D("hSliceCorr",
        "Average correlation between energy slices;slice #beta;slice #alpha",
        NSLICE,0,NSLICE, NSLICE,0,NSLICE);
    for(int a=0;a<NSLICE;++a)
      for(int b=0;b<NSLICE;++b){
          double sum=0,n=0;
          for(int ia=0; ia<NBINPS; ++ia){
              int i=a*NBINPS+ia;
              for(int ib=0; ib<NBINPS; ++ib){
                  int j=b*NBINPS+ib;
                  const double d=sigma[i]*sigma[j];
                  if(d==0) continue;
                  sum+=cov160(i,j)/d; ++n;
              }
          }
          if(n>0) hSlice->SetBinContent(b+1,a+1,sum/n);
      }

    TMatrixDSym sym(NBIN);
    for(int i=0;i<NBIN;++i)
      for(int j=0;j<NBIN;++j) sym(i,j)=cov160(i,j);

    TMatrixDSymEigen eig(sym);
    const TVectorD& ev=eig.GetEigenValues();
    TGraph* gEig=new TGraph(NBIN);
    for(int k=0;k<NBIN;++k) gEig->SetPoint(k,k+1,ev[k]);
    gEig->SetName("gEigen");
    gEig->SetTitle("Eigenvalue spectrum;index;#lambda");
    gStyle->SetOptStat(0);
    TCanvas* c1=new TCanvas("c1","Err & Eigen",2200,800);
    c1->Divide(2,1);
    c1->cd(1); hErr->SetLineWidth(2); hErr->Draw("hist");
    c1->cd(2); gPad->SetLogy(); gEig->SetMarkerStyle(20); gEig->Draw("AP");
    TCanvas* c2=new TCanvas("c2","Full Corr",900,800);
    gStyle->SetPalette(kBird); hCorr->GetZaxis()->SetRangeUser(-1,1);
    hCorr->Draw("colz"); c2->SetRightMargin(0.15);
    TCanvas* c3=new TCanvas("c3","Slice Corr",650,600);
    hSlice->GetZaxis()->SetRangeUser(-1,1);
    hSlice->Draw("colz text"); c3->SetRightMargin(0.15);


    std::unique_ptr<TFile> fout(TFile::Open("V1_EB_Cov_Analysis.root",
                                            "RECREATE"));

    hDataMap ->Write();
    hTruth160->Write("Truth_160bin");
    cov160   .Write("Cov_160x160");
    hErr->Write(); hCorr->Write(); hSlice->Write(); gEig->Write();
    c1->Write(); c2->Write(); c3->Write();
    fout->Close();

    std::cout<<"\n WTA_V1_EB_Cov_Analysis.root (160-bin)\n";
}

