#include <TFile.h>
#include <TH1.h>
#include <iostream>
#include <memory>
#include <cmath>

void WTA_Make_FakeRatio(
    const char* fakeFile  = "Combined_V1_Matrix_WTA_SOPcut_v5_normAll.root",
    const char* fakeHist  = "hBigLeft",
    const char* recoFile  = "WTA_V1_EnergyBands_ER_8slices_t_normAll.root",
    const char* recoHist  = "hV1_EnergyBands",
    const char* outFile   = "WTA_V1_EnergyBands_FAKE_RATIO.root")
{
    std::unique_ptr<TFile> fFake(TFile::Open(fakeFile, "READ"));
    auto* hFakeSrc = dynamic_cast<TH1*>(fFake->Get(fakeHist));
    std::unique_ptr<TFile> fReco(TFile::Open(recoFile, "READ"));
    auto* hReco = dynamic_cast<TH1*>(fReco->Get(recoHist));
    const int NB = std::min(hFakeSrc->GetNbinsX(), hReco->GetNbinsX());
    auto* hRatio = static_cast<TH1*>(hFakeSrc->Clone("hFakeOverFakePlusMatch"));
    hRatio->Reset();
    hRatio->SetTitle("fake / (fake + match);Slice + V_{1} bin;Ratio");
    for (int i = 1; i <= NB; ++i) {
        const double nF = hFakeSrc->GetBinContent(i);  // fake
        const double nR = hReco   ->GetBinContent(i);  // total = fake + match

        if (nF < 0.0 || nR <= 0.0 || nF > nR) {
            hRatio->SetBinContent(i, 0.0);
            hRatio->SetBinError  (i, 0.0);
            continue;
        }

        const double ratio   = nF / nR;
        const double sigmaF  = std::sqrt(nF);
        const double sigmaR  = std::sqrt(nR);

        const double relErrF = (nF > 0.0) ? (sigmaF / nF) : 0.0;
        const double relErrR =              sigmaR / nR;

        const double err     = ratio * std::sqrt(relErrF * relErrF +
                                                 relErrR * relErrR);

        hRatio->SetBinContent(i, ratio);
        hRatio->SetBinError  (i, err);
    }
    std::unique_ptr<TFile> fout(TFile::Open(outFile, "RECREATE"));
    hRatio->Write();
    fout->Close();
}
