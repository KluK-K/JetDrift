#include <TFile.h>
#include <TH1.h>
#include <TMath.h>
#include <memory>
#include <iostream>

void WTA_Make_FakeRatio(
    const char* fakeFile  = "Combined_V1_Matrix_WTA_SOPcut_v5_normAll.root",
    const char* fakeHist  = "hBigLeft",
    const char* recoFile  = "WTA_V1_EnergyBands_ER_8slices_t_normAll.root",
    const char* recoHist  = "hV1_EnergyBands_probAll",
    const char* outFile   = "WTA_V1_EnergyBands_FAKE_RATIO.root")
{
    std::unique_ptr<TFile> fFake(TFile::Open(fakeFile, "READ"));
    std::unique_ptr<TFile> fReco(TFile::Open(recoFile, "READ"));
    auto* hFakeSrc = dynamic_cast<TH1*>(fFake->Get(fakeHist));
    auto* hRecoSrc = dynamic_cast<TH1*>(fReco->Get(recoHist));
    const int NB = std::min(hFakeSrc->GetNbinsX(), hRecoSrc->GetNbinsX());
    const double Ntot = hRecoSrc->GetEntries();

    auto* hRatio = static_cast<TH1*>(hFakeSrc->Clone("hFakeOverFakePlusMatch"));
    hRatio->Reset();
    hRatio->Sumw2();
    hRatio->SetTitle("fake / (fake + match);Slice + V_{1} bin;Ratio");

    for (int i = 1; i <= NB; ++i) {
        const double pF = hFakeSrc->GetBinContent(i);
        const double pR = hRecoSrc->GetBinContent(i); 

        if (pR <= 0.0 || pF < 0.0 || pF > pR + 1e-12) { 
            hRatio->SetBinContent(i, 0.0);
            hRatio->SetBinError  (i, 0.0);
            continue;
        }

        const double ratio = pF / pR;
        const double nR    = pR * Ntot; 
        const double err   = std::sqrt( ratio * (1.0 - ratio) / nR );

        hRatio->SetBinContent(i, ratio);
        hRatio->SetBinError  (i, err);
    }
    std::unique_ptr<TFile> fout(TFile::Open(outFile, "RECREATE"));
    hRatio->Write();
    fout->Close();
}

