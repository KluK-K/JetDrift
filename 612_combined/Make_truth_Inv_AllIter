#include <TFile.h>
#include <TH1D.h>
#include <iostream>
#include <memory>
#include <algorithm>
#include <cmath>

static TH1* GetHistFlexible(TFile* f, const TString& base, int it){
    TString name = Form("%s_iter%02d", base.Data(), it);
    TH1* h = dynamic_cast<TH1*>(f->Get(name));
   return h;
}

void Make_truth_Inv_AllIter(
    const char* recoFile   = "Unfold_RecoPure_AllIter_new.root",
    const char* ratioFile  = "V1_EnergyBands_FAKE_RATIO_2.root",
    const char* outFile    = "Make_truth_Inv_AllIter.root",
    const char* recoBase   = "hTruthRecoPure",
    const char* ratioBase  = "hFakeOverFakePlusMatch",
    int         maxIter    = 20
){
    std::unique_ptr<TFile> fRec(TFile::Open(recoFile ,"READ"));
    std::unique_ptr<TFile> fRat(TFile::Open(ratioFile,"READ"));
    std::unique_ptr<TFile> fout(TFile::Open(outFile,"RECREATE"));
    for(int it=1; it<=maxIter; ++it){
        TH1* hRec = GetHistFlexible(fRec.get(),  recoBase,  it);
        TH1* hR   = GetHistFlexible(fRat.get(), ratioBase, it);
        int NB = hRec->GetNbinsX();
        auto* hInv = dynamic_cast<TH1D*>(hRec->Clone(
                        Form("hTruth_InvScaled_iter%d", it)));
        hInv->Reset();
        hInv->SetTitle(Form("Inv scaled truth (iter %d);Bin;Entries", it));
        for(int i=1;i<=NB;++i){
            double nRec = hRec->GetBinContent(i);
            double eRec = hRec->GetBinError(i);
            double r    = hR  ->GetBinContent(i);
            double eR   = hR  ->GetBinError(i);
            r = std::clamp(r, 0.0, std::nextafter(1.0, 0.0));
            double denom = 1.0 - r;

            if(denom <= 0.0 || nRec < 0.0){
                hInv->SetBinContent(i, 0.0);
                hInv->SetBinError  (i, 0.0);
            } else {
                double inv  = nRec / denom;
                double eInv = std::sqrt(
                                 (eRec * 1.0 / denom) * (eRec * 1.0 / denom) +
                                 (nRec * eR / (denom * denom)) * (nRec * eR / (denom * denom))
                              );
                hInv->SetBinContent(i, inv);
                hInv->SetBinError  (i, eInv);
            }
        }
        hInv->Write();
    }
    fout->Close();
}

