#include <TFile.h>
#include <TMatrixD.h>
#include <TMatrixDSymEigen.h>
#include <TH1D.h>
#include <TH2D.h>
#include <TGraph.h>
#include <TCanvas.h>
#include <TStyle.h>
#include <iostream>
#include <memory>
#include <vector>
#include <cmath>

void WTA_Analyze_V1_EB_Cov()
{
    const char* inFile  = "WTA_V1_EB_Unfolded_v5.root";
    const char* matName = "Cov_160x160";
    const int   NSLICE  = 5;             
    const int   NBINPS  = 32;   
    const int   NBIN    = NSLICE*NBINPS;

    std::unique_ptr<TFile> fin(TFile::Open(inFile,"READ"));
    if(!fin || fin->IsZombie()){
        std::cerr<<"[ERROR] cannot open "<<inFile<<"\n"; return;
    }
    auto* cov = dynamic_cast<TMatrixD*>(fin->Get(matName));
    if(!cov){
        std::cerr<<"[ERROR] no "<<matName<<" inside "<<inFile<<"\n"; return;
    }
    if(cov->GetNrows()!=NBIN){
        std::cerr<<"[WARN] matrix dimension "<<cov->GetNrows()
                 <<" â‰  "<<NBIN<<" (expected)\n";
    }

    TH1D* hErr = new TH1D("hErr",
        "Unfolded V_{1} 1#sigma error per bin;global unfolded bin ID;#sigma(V_{1})",
        NBIN, 0, NBIN);

    std::vector<double> sigma(NBIN,0.0);
    for(int i=0;i<NBIN;++i){
        sigma[i]=std::sqrt((*cov)(i,i));
        hErr->SetBinContent(i+1,sigma[i]);
    }


    TH2D* hCorr = new TH2D("hCorr",
        "Correlation matrix #rho_{ij};unfolded bin i;unfolded bin j",
        NBIN,0,NBIN, NBIN,0,NBIN);

    for(int i=0;i<NBIN;++i)
      for(int j=0;j<NBIN;++j){
          const double d=sigma[i]*sigma[j];
          hCorr->SetBinContent(i+1,j+1,(d>0)?(*cov)(i,j)/d:0.);
      }


    TH2D* hSlice = new TH2D("hSliceCorr",
        "Average correlation between energy slices;slice #beta;slice #alpha",
        NSLICE,0,NSLICE, NSLICE,0,NSLICE);

    for(int a=0;a<NSLICE;++a)
      for(int b=0;b<NSLICE;++b){
          double sum=0,n=0;
          for(int ia=0; ia<NBINPS; ++ia){
              int i=a*NBINPS+ia;
              for(int ib=0; ib<NBINPS; ++ib){
                  int j=b*NBINPS+ib;
                  const double d=sigma[i]*sigma[j];
                  if(d==0) continue;
                  sum+=(*cov)(i,j)/d; ++n;
              }
          }
          if(n>0) hSlice->SetBinContent(b+1,a+1,sum/n);
      }


    TMatrixDSym sym(NBIN);
    for(int i=0;i<NBIN;++i)
      for(int j=0;j<NBIN;++j) sym(i,j)=(*cov)(i,j);

    TMatrixDSymEigen eig(sym);
    const TVectorD& ev=eig.GetEigenValues();
    TGraph* gEig=new TGraph(NBIN);
    for(int k=0;k<NBIN;++k) gEig->SetPoint(k,k+1,ev[k]);
    gEig->SetName("gEigen");
    gEig->SetTitle("Eigenvalue spectrum;index;#lambda");


    gStyle->SetOptStat(0);

    TCanvas* c1=new TCanvas("c1","Err & Eigen",2200,800);
    c1->Divide(2,1);
    c1->cd(1); hErr->SetLineWidth(2); hErr->Draw("hist");
    c1->cd(2); gPad->SetLogy(); gEig->SetMarkerStyle(20); gEig->Draw("AP");

    TCanvas* c2=new TCanvas("c2","Full Corr",900,800);
    gStyle->SetPalette(kBird); hCorr->GetZaxis()->SetRangeUser(-1,1);
    hCorr->Draw("colz"); c2->SetRightMargin(0.15);

    TCanvas* c3=new TCanvas("c3","Slice Corr",650,600);
    hSlice->GetZaxis()->SetRangeUser(-1,1);
    hSlice->Draw("colz text"); c3->SetRightMargin(0.15);


    std::unique_ptr<TFile> fout(TFile::Open("WTA_V1_EB_Cov_Analysis.root",
                                            "RECREATE"));
    hErr->Write(); hCorr->Write(); hSlice->Write(); gEig->Write();
    c1->Write(); c2->Write(); c3->Write();
    fout->Close();

    std::cout<<"WTA_V1_EB_Cov_Analysis.root (160-bin)\n";
}

